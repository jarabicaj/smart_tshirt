import React, { createContext } from "react";
import round from "./round";

const exgContext = createContext();

export class EcgProvider extends React.Component {
  state = {
    measure: {
      name: "",
      age: 18,
      data: "82,94872819;84,84228757;84,0755463;83,33191389;81,20531607;80,98769931;80,88178711;81,07683765;83,31943653;81,28645952;84,04937867;81,81076305;83,09982141;80,34399082;82,25643857;82,94255116;82,77784108;80,98375656;77,26182388;82,21187266;83,85523823;83,70520779;83,95699601;83,18295742;86,12540671;84,852482;82,60484829;80,79658106;81,13635009;81,16761991;80,89730024;81,73477153;81,92647993;84,21680175;84,22868144;83,92672451;83,78333419;84,02946201;84,38317506;84,27453831;84,1225072;84,88204289;84,11395765;84,3396986;84,33922736;80,0955508;83,87495944;84,01220195;88,26066328;89,24893882;95,04238538;96,85458684;95,07901411;96,2644535;95,24358284;96,9188382;99,73217386;102,6298861;102,1787388;98,14946415;93,93176899;95,98995933;96,85821623;94,31173324;93,96781864;88,66346015;91,47935497;88,4759245;87,98160964;85,93613508;83,75297947;83,78034986;81,13015653;80,22129355;81,12726412;79,90581863;80,87306122;81,15031461;82,38541233;82,11020737;82,83019619;82,84738731;84,26387584;83,320686;83,07679374;83,76324065;100,8966872;143,3313923;218,3853613;312,9604394;412,6985524;482,820032;496,2399612;456,1882304;369,8244498;271,4709228;184,7414003;129,2110859;110,2182578;104,6594723;104,3342125;102,6289274;95,1333571;93,04188294;88,5766151;86,23629723;85,58931992;84,19037234;87,04100121;87,4958736;87,26242332;85,64848565;85,23898548;84,17401556;83,52973976;85,16886726;87,56388294;86,08670142;89,00006776;88,2349541;89,93122347;88,34441065;89,89401378;88,83222164;88,11640289;89,81168808;92,32965068;92,85103294;92,81898257;93,10354142;95,56745324;95,66509534;99,58168265;98,57796893;96,89227215;100,0253547;102,5865746;105,9094189;104,6580256;106,9772562;108,5391821;111,5650274;114,3093769;118,256281;128,5392497;128,2091685;132,7675991;135,4502614;138,3791262;142,7647134;143,4958828;144,9472057;147,5980129;149,4945186;151,8244258;154,418425;155,8312699;156,4007053;153,39925;151,810564;147,4909821;142,8158278;136,3574659;134,4043213;128,9191041;123,4015979;119,7427195;114,3391589;111,4324305;105,0068894;102,5440274;100,8280432;99,25503344;98,37434898;97,96231913;96,49598208;96,7212875;95,12577885;90,28443365;88,92388202;86,58801212;86,59523497;87,97251372;88,11295736;89,87790716;90,46594353;92,45756794;89,70156885;91,00017968;88,80582489;88,39088326;85,2246097;87,48297427;87,75591485;87,68254632;86,26851155;83,07471451;83,24524684;83,60187513;83,60086981;84,25596257;84,97146978;87,21847193;85,70204717;85,78833206;83,3615072;83,16531746;83,32214859;84,93033436;86,03323111;85,77389509;85,42969073;87,56021721;87,17006403;86,45494378;85,99545546;86,57775362;87,69476578;88,31677406;89,4861464;89,10433051;87,61866866;87,68970162;87,27674966;87,57735833;85,14604933;86,59647375;86,70148309;88,3417635;89,60134826;88,21288502;86,65657305;83,73989083;79,27725098;82,58046682;83,16423983;85,60721991;85,68182147;82,37037927;84,63861998;84,23623555;83,66062596;84,66898253;84,34203619;84,66063827;85,23526707;87,62596868;85,70960132;84,3682701;83,69717402;84,14909723;83,5792802;82,74443794;81,46446935;83,62644526;83,10399049;83,53673194;82,76461565;82,45279379;82,51727507;83,10493816;83,63453996;83,83216518;83,46144703;83,49013319;80,09337625;83,55799533;82,8012133;84,43037908;83,51322377;83,99732152;83,56013124;85,92409316;85,54685174;85,60003288;85,06064027;82,59273842;83,90978891;85,50316423;85,47414347;81,92064251;86,54146629;84,98311679;84,56046924;84,4263001;82,72563414;83,46794547;82,9057611;84,5131819;84,36535614;83,64032602;84,3187457;85,8718189;87,47147523;85,28204003;85,62645584;85,37487175;85,00036795;86,59529887;84,31071806;85,63124073;84,38034462;86,19144345;88,75793758;88,47432977;88,67725647;88,47398785;89,31206884;93,86450746;97,4274959;99,57923438;98,4546586;98,30104652;101,8133057;101,383192;106,5278832;110,4795027;110,2648152;105,8654318;101,4036106;99,51659454;99,36131273;96,85618407;96,8774499;95,43715298;93,51589889;90,64190975;82,27517284;84,13639489;82,51915839;83,51022773;82,35085571;83,91140968;83,65497641;84,3346797;87,34054194;88,22768671;88,09286276;89,83971015;87,32302604;88,35090454;87,26648391;88,1524346;87,78677245;90,37440135;96,34637956;120,0988252;177,9676202;264,7140456;363,4395444;449,3726274;494,0534667;478,9732168;414,7707538;322,4993773;237,4044138;165,161659;127,0244159;112,8663223;106,5703601;102,4822102;97,17987092;94,05476156;91,87754453;86,59919214;89,51738137;90,15991871;88,92534098;88,86811249;85,57442747;88,48917794;90,01340322;90,84620177;88,70821994;87,53273344;86,30427731;87,39999273;88,37151438;88,35832454;86,129709;88,23964079;88,44567826;91,41573175;91,18312938;93,05359215;93,00238668;95,0702694;95,94417345;96,99270341;96,9136617;96,91493447;98,38932519;102,0348545;103,1010526;105,2042171;105,2582843;104,6734791;110,2138018;113,3077415;113,4368123;117,5420076;116,8989456;118,4471629;122,5192772;126,6755446;130,6844705;134,0551166;137,4802243;141,5772373;143,7234565;147,8578634;153,1017243;152,5453366;155,5535035;156,7300216;154,8599584;160,1379154;155,5319697;154,5198601;151,714737;148,8872061;143,0831081;137,448554;134,4205797;129,6287425;125,8015866;121,0746631;117,3841388;115,3053877;111,5394666;105,7770407;104,1175482;100,3025916;100,0819174;99,3635373;98,54225167;96,8520156;97,09924597;96,93116437;95,14089816;92,44707519;89,78504955;92,08364519;93,82070009;95,99156563;96,34223008;95,74917577;96,03161063;95,77171571;96,9604473;94,40690109;93,93944041;92,24283954;89,02259227;97,25578135;95,64015318;95,22240192;93,52179198;88,2806028;89,34654832;88,86466059;92,43257632;92,76410692;93,35495222;94,4168196;94,87226582;94,45865782;92,85355472;91,41489873;89,45523944;90,94129381;92,6147409;95,96388558;95,5169641;95,40335422;92,8312746;92,59648582;91,01488704;90,53563798;90,31546547;92,87070852;92,64021172;95,13005916;93,58226949;91,3596812;88,89822453;90,73274012;93,18270316;93,58811506;93,36942488;93,83942163;94,6642102;93,21718262;93,55954503;93,32840626;90,71459566;92,67457767;89,23174142;90,61944974;88,30483501;87,7089865;90,64382824;89,26749734;88,7023764;89,28388936;88,64024141;88,63526275;87,35894975;87,72069115;88,23821526;86,52380309;87,62287421"
        .split(";")
        .map(x => Number(x.replace(",", "."))),
      frequency: 256
    },
    results: []
  };

  setMeasure = measure => {
    this.setState({ measure });
  };

  addResult = (bpm, ramp) => {
    this.setState(({ measure, results }) => ({
      results: results.concat({
        bpm,
        ramp: round(ramp, 3),
        name: measure.name,
        age: measure.age
      })
    }));
  };

  render() {
    const { measure, results } = this.state;
    return (
      <exgContext.Provider
        value={{
          measure,
          results,
          setMeasure: this.setMeasure,
          addResult: this.addResult
        }}
      >
        {this.props.children}
      </exgContext.Provider>
    );
  }
}

export const ecgConsumer = exgContext.Consumer;

export default exgContext;
